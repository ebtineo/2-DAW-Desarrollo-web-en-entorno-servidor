/*
 * MiniChatClient.java
 *
 * Created on 23-oct-2012, 10:53:25
 */

package minichat;

import javax.swing.JOptionPane;
import java.net.*;
import java.io.*;


/**
 *
 * @author jose
 */
public class MiniChatClientv2 extends javax.swing.JFrame {

    Socket conexion;
    BufferedReader entrada = null;
    PrintWriter salida = null;

    /** Creates new form MiniChatClient */
    public MiniChatClientv2() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        campoNick = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        campoServidor = new javax.swing.JTextField();
        botonConectar = new javax.swing.JButton();
        botonDesconectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoMensaje = new javax.swing.JTextField();
        scroll = new javax.swing.JScrollPane();
        conversacion = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Conexión"));

        jLabel2.setText("Nick:");

        jLabel3.setText("Servidor:");

        campoServidor.setText("localhost");
        campoServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoServidorActionPerformed(evt);
            }
        });

        botonConectar.setText("Conectar");
        botonConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConectarActionPerformed(evt);
            }
        });

        botonDesconectar.setText("Desconectar");
        botonDesconectar.setEnabled(false);
        botonDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDesconectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNick, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonConectar, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(botonDesconectar, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(campoNick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(campoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonConectar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonDesconectar)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("OCRACondensed", 1, 18));
        jLabel1.setForeground(java.awt.Color.blue);
        jLabel1.setText("MiniChatClient");

        jLabel4.setText("Mensaje:");

        campoMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMensajeActionPerformed(evt);
            }
        });

        conversacion.setContentType("text/html");
        conversacion.setEditable(false);
        scroll.setViewportView(conversacion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(273, 273, 273)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(219, 219, 219)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(65, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoServidorActionPerformed

    }//GEN-LAST:event_campoServidorActionPerformed

    private void botonConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConectarActionPerformed
        if (campoNick.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Debe especificar el nick", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (campoServidor.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Debe especificar el servidor", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            conexion = new Socket(campoServidor.getText(),2000);
            entrada = new BufferedReader(new InputStreamReader(conexion.getInputStream()));
            salida = new PrintWriter(conexion.getOutputStream(),true);
            campoNick.setEnabled(false);
            campoServidor.setEnabled(false);
            botonConectar.setEnabled(false);
            botonDesconectar.setEnabled(true);
            conversacion.setText("");
            new Escucha().start();

        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonConectarActionPerformed

    private void campoMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMensajeActionPerformed

            salida.println(campoNick.getText() + ": " + campoMensaje.getText());
            campoMensaje.setText("");
    }//GEN-LAST:event_campoMensajeActionPerformed

    private void botonDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDesconectarActionPerformed
        try {
            conexion.close();
        }
        catch (IOException e) {
            System.err.println(e.getMessage());
        }
        botonConectar.setEnabled(true);
        botonDesconectar.setEnabled(false);
        campoNick.setEnabled(true);
        campoServidor.setEnabled(true);
    }//GEN-LAST:event_botonDesconectarActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniChatClientv2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonConectar;
    private javax.swing.JButton botonDesconectar;
    private javax.swing.JTextField campoMensaje;
    private javax.swing.JTextField campoNick;
    private javax.swing.JTextField campoServidor;
    private javax.swing.JTextPane conversacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables

    private class Escucha extends Thread {
        private String contenido = "";
        private String cabecera = "<html><head></head><body>";
        private String pie = "</body></html>";
        private int posicion = 0;
        @Override
        public void run() {
            String linea;
            try {
                while ((linea = entrada.readLine())!=null) {
                    posicion += linea.length() + 1;
                    if (linea.indexOf(campoNick.getText() + ": ")==0) {
                        linea = "<font color=blue>" + linea + "</font>";
                    }
                    contenido = contenido + linea + "<br>" + "\n";
                    conversacion.setText( cabecera + contenido + pie);
                    conversacion.setCaretPosition(posicion);
                }
            } catch (IOException e) {}
        }
    }
}
