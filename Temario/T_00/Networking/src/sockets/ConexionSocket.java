/*
 * ConexionSocket.java
 *
 * Created on 23-feb-2011, 0:38:26
 */

package sockets;

import java.net.*;
import java.io.*;

/**
 * Este programa realiza una conexión con el servidor mediante la clase Socket
 *  y permite mantener una sesión de red, enviando cada linea de texto tecleada
 *  por el usuario y mostrando cada linea recibida
 * @author jose
 */
public class ConexionSocket extends javax.swing.JFrame {

    private BufferedReader entrada = null;
    private PrintWriter salida = null;
    private Socket conexion = null;

    /** Creates new form ConexionSocket */
    public ConexionSocket() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        campoServidor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        campoPuerto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        campoEntrada = new javax.swing.JTextField();
        botonConectar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Servidor:");

        campoServidor.setText("www.google.es");

        jLabel3.setText("Puerto:");

        campoPuerto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        campoPuerto.setText("80");

        jLabel2.setText("Entrada:");

        campoEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoEntradaIntroducido(evt);
            }
        });

        botonConectar.setText("Conectar");
        botonConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectarPulsado(evt);
            }
        });

        texto.setColumns(20);
        texto.setRows(5);
        jScrollPane1.setViewportView(texto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(campoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(campoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(botonConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(campoPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonConectar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoEntradaIntroducido(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoEntradaIntroducido
            try {
                if (salida != null) {
                    salida.println(campoEntrada.getText());
                    System.out.println("Enviando ... " + campoEntrada.getText());
                }
            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
    }//GEN-LAST:event_campoEntradaIntroducido

    private void conectarPulsado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectarPulsado
        if (botonConectar.getText().equals("Conectar")) {
            botonConectar.setText("Desconectar");
            conectar();
        }
        else {
            botonConectar.setText("Conectar");
            desconectar();
        }
    }//GEN-LAST:event_conectarPulsado

    public void conectar() {

        try {
            // Creamos el socket que realizará la conexión al puerto especificado del servidor
            conexion = new Socket(campoServidor.getText(),Integer.parseInt(campoPuerto.getText()));
            // Asociamos el flujo entrante de la conexión a un objeto BufferedReader
            entrada = new BufferedReader(new InputStreamReader(conexion.getInputStream()));
            // Asociamos el flujo saliente de la conexión a un objeto PrintWriter con la opción autoflush activada
            salida = new PrintWriter(conexion.getOutputStream(),true);
            // Creamos un hilo que atenderá a los datos recibidos desde el servidor
            (new LeerEntradaConexion()).start();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    public void desconectar() {
        try {
            //    entrada.close();
            //    salida.close();
            conexion.close();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConexionSocket().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonConectar;
    private javax.swing.JTextField campoEntrada;
    private javax.swing.JTextField campoPuerto;
    private javax.swing.JTextField campoServidor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea texto;
    // End of variables declaration//GEN-END:variables

    /**
     * Hilo de ejecución que permanecerá leyendo los datos recibidos mientras
     * permanezca activo el canal de recepción
     */
    private class LeerEntradaConexion extends Thread {
        @Override
        public void run() {
            System.out.println("Iniciando escucha ...");
            String linea;
            try {
                while (!conexion.isInputShutdown() && (linea = entrada.readLine()) != null) {
                    texto.append(linea + "\n");
                    texto.setCaretPosition(texto.getText().length());
                }
                System.out.println("Terminando escucha ...");
                desconectar();
                botonConectar.setText("Conectar");
                
            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
        }
    }
}
